/**********************************************************************
 Java CUP specification for a parser for harambe programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal                TRUE;
terminal                FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */

//TODO: go through and verify with ast.java that the tree structure matches the grammer
non terminal ProgramNode      program; 		//***given***
non terminal LinkedList       declList; 	//***given***
non terminal DeclNode         decl;		//***given***
non terminal DeclListNode     varDeclList;	//seems to make sense
non terminal VarDeclNode      varDecl;		//***given***
non terminal FnDeclNode       fnDecl;		//good
non terminal StructDeclNode   structDecl;	//good
non terminal DeclListNode     structBody;	//seems like it would make sense based on ast definition

non terminal FormalsListNode  formals;		//Not sure with Formals and FormalsList
non terminal LinkedList	      formalsList; 	//Not sure with Formals and FormalsList

non terminal FormalDeclNode   formalDecl; 	//good
non terminal FnBodyNode       fnBody; 		//good
non terminal StmtListNode     stmtList; 	//pretty sure this is right
non terminal StmtNode	      stmt; 		//good
non terminal AssignStmtNode   assignExp; 	//pretty sure this is right, otherwise AssignNode
non terminal ExpNode	      exp;		//good
non terminal			term; 		//not sure what type this would be
non terminal			fnCall; 	//CallStmtNode or CallExpNode?
non terminal LinkedList	      actualList;
non terminal TypeNode         type;		//***given***
non terminal			loc; 		//Not sure on type
non terminal IdNode           id;		//***given***
 
 
/* NOTE: Add precedence and associativity declarations here */


precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQUALS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left NOT;


start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
		| fnDecl: fd 
		{: RESULT = fd;
		:}
		| structDecl:sd
		{: RESULT = sd;
		:}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                ;

// TODO: check w Scott
varDeclList	::= varDeclList: vdl varDecl: vd
		{: vdl.addLast(vd);
		   RESULT = vdl;
		:}
		| /* epsilon */
		{: RESULT = new LinkedList<VarDeclNode>();
		:}
		;

//TODO: complete this rule
fnDecl		::=
		{: RESULT =
		:}
		;

//TODO: complete this rule
structDecl	::=
		{: RESULT =
		:}
		;

//TODO: complete this rule
structBody	::=
		{: RESULT =
		:}
		;

//TODO: complete this rule
formals		::=
		{: RESULT =
		:}
		;

//TODO: complete this rule
formalsList	::=
		{: RESULT =
		:}
		;

//TODO: complete this rule
formalDecl	::=
		{: RESULT =
		:}
		;

//TODO: complete this rule
fnBody		::=
		{: RESULT =
		:}
		;

//TODO: complete this rule
stmtList	::= stmtList:sl stmt:s
		{: RESULT = sl.addLast(s);
		:}
		| /* epsilon */
		{: RESULT = new LinkedList<StmtNode>();
		:}
		;

//TODO: complete this rule
stmt		::= assignExp:ae
		{: RESULT = ae
		:}
		;

//TODO: complete this rule
assignExp	::=
		{: RESULT =
		:}
		;

//TODO: complete this rule
exp		::= assignExp:ae
		{: RESULT =
		:}
		| exp:e1 PLUS exp:e2
		{: RESULT = new PlusNode(e1, e2);
		:}
		| exp:e1 MINUS exp:e2
		{: RESULT = new MinusNode(e1, e2);
		:}
		| exp:e1 TIMES exp:e2
		{: RESULT = new TimesNode(e1, e2);
		:}
		| exp:e1 DIVIDE exp:e2
		{: RESULT = new DivideNode(e1, e2);
		:}
		| NOT exp:e
		{: RESULT = new NotNode(e)
		:}
		| exp:e1 AND exp:e2
		{: RESULT = new AndNode(e1, e2);
		:}
		| exp:e1 OR exp:e2
		{: RESULT = new OrNode(e1, e2);
		:}
		| exp:e1 EQUALS exp:e2
		{: RESULT = new EqualsNode(e1, e2);
		:}
		| exp:e1 NOTEQUALS exp:e2
		{: RESULT = new NotEqualsNode(e1, e2);
		:}
		| exp:e1 LESS exp:e2
		{: RESULT = new LessNode(e1, e2);
		:}
		| exp:e1 GREATER exp:e2
		{: RESULT = new GreaterNode(e1, e2);
		:}
		| exp:e1 LESSEQ exp:e2
		{: RESULT = new LessEqNode(e1, e2);
		:}
		| exp:e1 GREATEREQ exp:e2
		{: RESULT = new GreaterEqNode(e1, e2);
		:}
		| MINUS term:t
		{: RESULT = new UnaryMinusNode(t);
		:}		
		;

//TODO: complete this rule
term		::= loc:l
		{: RESULT = //something
		:}
		| INTLITERAL:ilit
		{: RESULT = new IntLitNode(ilit.lineNum, ilit.charNum, ilit.intval);
		:}
		| SRINGLITERAL:strlit
		{: RESULT = new StringLitNode(strlit.lineNum, strlit.charNum, strlit.strVal);
		:}
		| TRUE
		{: RESULT = true;
		:}
		| FALSE
		{: RESULT = false;
		:}
		| LPAREN exp:e RPAREN
		{: RESULT = //something
		:}
		| fncall:f
		{: RESULT = //something
		:}
		;

//TODO: complete this rule
fnCall		::=
		{: RESULT =
		:}
		;

//TODO: complete this rule
actualList	::=
		{: RESULT =
		:}
		;

//TODO: complete this rule
loc		::= id:i
		{: RESULT =
		:}
		| loc:l DOT id:i
		{:
		:}
		;

//TODO: check w Scott
type            ::= INT
                {: RESULT = new IntNode();
                :}
		| BOOL
		{: RESULT = new BoolNode();
		:}
		| VOID
		{: RESULT = new VoidNode();
		:}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
				
